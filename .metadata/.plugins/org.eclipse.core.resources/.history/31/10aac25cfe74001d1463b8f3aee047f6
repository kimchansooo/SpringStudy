[DI개념]_1 : 의존성 주입(의존 객체 주입)

프로젝트 >> 수 많은 클래스 생성 >> 클래스들간에 관계를 통해 구현

1. 상속(is ~ a)
2. 포함(has ~ a)

A라는 클래스는  B라는 클래스가 필요하다

프로그래밍 적으로 풀면(A는 B의 자원을 사용가능)

class A extends B {} //상속

class A {
	//B b = new B(); //포함
	B b;
	A(){
		b = new B();
	}
}
main >> A a = new A(); a.b.자원접근


class A{
	B b;
	A(B b){ //생성자를 통해서 의존객체의 주소값을 받기 
	 this.b = b;
	}
}
main >>B b = new B();    A a = new A();

class A {
	public B print(B b){  //의존 (함수에서 전제조건)
		return b;
	}
}

main >> A a = new A();  a.print(new B());


--나는 니가 필요해(나는 너의 주소가 필요해)
NewRecordView 클래스는 NewRecord에 의존한다 (필요)
NewRecordView 클래스가 필요한 객체를 [생성자]통해서 주입 또는 생성이 가능
NewRecordView 클래스가 필요한 객체를 [생성자]통해서 생성 (두 객체의 lifecycle 동일)
NewRecordView 클래스가 필요한 객체를 [생성자]통해서 주입 (두 객체의 lifecycle 동일하지 않음)

DI (의존성 주입) : Spring 학습의 처음 나오는 개념
result : 필요한 객체를 [생성자] 통해서 그 주소를 주입(또는 생성)
----------------------------------------------------------------------------
[DI개념]_2 : 의존성 주입(의존 객체 주입)
-NewRecordView 클래스는 필요로 하는 객체를 setter 함수를 통해서  주입(주소를) 받아서 사용
-객체의 생성이 서로 독립적 >> 필요시에 객체를 주입을 받을 수 있다.
 NewRecordView view = new NewRecordView();
 NewRecord record = new NewRecord(100, 50 , 50);
-두 객체의 lifecycle은 같지 않다 >> 집합 연관
----------------------------------------------------------------------------
시나리오
class A , class B
A라는 클래스가 B 클래스를 사용하는 방법

1. 상속(is~a) >> Spring FrameWork 에서는 관심이 없다

2. 포함(has~a) >> 내 클래스안에 다른 클래스가 들어오는 것
 2.1 [생성자]를 통해서 주입 (constructor injection)
 >> main 함수 >> A a = new A();
 
 class A { B b;  A(){ b= new B();  } }
 
 >A라는 클래스의 생성자에서 B라는 객체 생성 사용 (복합연관)

 2.2 setter 함수를 통한 주입(setter injection)
 >> main함수 >> A a = new A(); B b = new B();  a.setB(b);
 
 class A {B b; A(){}; public void setB(B b){this.b = b;}
 
 Result : SpringFramework은 다른 객체의 의존(참조) 하기 위해서 
 생성자주입 , setter 주입 2가지 방법을 통해서 구현
 기수를 통칭해서 >> DI(dependency injection) >> 의존성 주입^^
 
 +알파 >> interface 들어가면 금상첨화 >> 다형성 >> 느슨한 구조 구현....
 
정리)
1. 생성자를 통해서 주입 (의무적인)
2. setter 함수를 통해서 주입 (필요에 따라서)
3. 다형성(인터페이스) 활용 ... (생성자 , setter 함수) 인터페이스 활용 
----------------------------------------------------------------------------
Spring Framework 사용

1. Spring.io 사이트 방문
1.1 사용하려는 spring 버전을 확인하고 다운로드

구버전: 다운로드 지원
https://repo.spring.io/ui/native/release/org/springframework/spring
수업이니까 다운로드를 받아서 프로젝트에 추가해서 사용

현실은 현업(Maven) : 사이트>> 필요로 하는 다양한 jar 가지고 있다 >> 프로젝트시 >> 사이트에서 다운로드
주소를 복사해서 pom.xml 파일에 붙여 넣으면 자동으로 다운로드 (인터넷이 된다는 보장하에)
<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>5.3.6</version>
</dependency>

비교)
git : remote (github)
git : local 저장소(commit) : 폴더 git init

비교)
maven : https://mvnrepository.com
maven : local 자동 생성  C:\Users\8210.m2\repository 필요한 jar 파일을 다운 받는다

프로젝트 빌드 , 배포 도구(소프트웨어) >> gradle, ant
----------------------------------------------------------------------------
실습
다운로드 받은 SpringFramework jar 파일사용
C:\Spring\Framework\spring-5.3.6-dist\spring-framework-5.3.6\libs
의존하는 lib  필요하다

Spring-framework-3.0.2.RELEASE-dependencies 다운로드 받아서 가지고 있어라

----------------------------------------------------------------------------
1. SpringFramework 핵심 엔진(lib)
core
context
beans
expression
jar 파일 참조 추가

2. 설정하기
2.1 xml 파일
