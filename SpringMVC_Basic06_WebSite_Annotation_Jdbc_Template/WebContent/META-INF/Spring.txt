기존 : JSP 기반의 사이트 (DAO  , VO)

고전적인 Spring 기반의 서비스



Spring 사용 LIB :
MAIN

dist\안에 Jar import ....

1. web.xml => Front Contoller : DispatcherServlet 구현
           => URL 패턴 : *.htm

2. 필요한 객체를 Load => 패턴을 가지고 있는 녀석들
   사용자가 notice.htm
   xml 하나 추가 ->     <servlet-name>dispatcher</servlet-name>
   dispatcher-servlet.xml 생성
   
-------------------------------------------------------------------------------
Spring 도 기존의 MVC 사용 
Model 유지
View 유지
Controller =>  DispatcherServlet => 사용하는 서비스 class 제작

3. Controller 역할을 하는 클래스 제작 
   => NoticeController 클래스 
   단 이 클래스는 implements Controller 구현 하여야 한다
   =>handleRequest 메서드가 모든 처리 담당
   =>글쓰기 -> 클래스
   =>글상세 -> 클래스 
   =>필요한 DAO 클래스도 참조 관계로 가지고 있다

4.  NoticeController 인젝션 처리 통해 DispatcherServlet 사용할 수 있게
    NoticeController 를 빈으로 등록  (페턴 구현)
    사용하는 추가 class 에 대해서 setter 처리 할 수 있도록 ref=설정
    
    주의사항
    <property name="noticeDao" ref="noticeDao"></property>   
     =>name="noticeDao" => private NoticeDao noticeDao;
     =>setter 동작 

5. view 단처리 (JSTL and EL)
   jar 추가
   
6. 기본적인 조회 처리 완료
------------------------------------------------------------
현재 추가적인 구현 : 상세보기  구현
그런데 현재 사용하는 Spring 방식에서는 하나의 기능이(method) 구현 하기 위해서
별도로 하나의 클래스 생성(controller) 상세를 처리하는 ....
-> 그래서 annotation 사용하면 지금의 문제를 해결 가능 (하나의 클래스가 여러개의 기능)    
   
   
------------------------------------------------------------  
현재 코드를 우리가 배운 방식으로 변환
[SpringMVC_Basic03_Annotation]

Annotataion으로 변경

@Controller
@RequestMapping

하나의 Controller가 여러개의 요청을 처리하도록 변환
>> CustomController >> 게시판 목록보기 , 게시판 상세보기를 함수 매핑을 통해서 완성

@Controller
class Board{
	
	@RequestMapping("/list.do")
	void listBoard(){
	}
	
	@RequestMappong("insert.do")
	void insertBoard(){
	}
	
}  
   
1. ncontroller 패키지 생성
1.1 CusetomerController 생성
   
********************************************************************************
[SpringMVC_Basic06_WebSite_Annotaion_Jdbc_Template]

1.JdbcTemplate 기반 코드 변환
2. 별도의 lib(jar)
-spring-jdbc-5.3.6.jar
-spring-tx-5.3.6.jar
(완)
3. 인터페이스 기반의 DAO 작업
>>MemberDao 인터페이스 구현 > NewMemberDao
>>NoticeDao 인터페이스 구현 > NewNoticeDao
NewMemberDao ,NewNoticeDao는 jdbctemplate에 의존한다 (객체의 주소가 필요하다) 주입이 필요하다.
(완)
4. route 컨테이너 구성하는 xml >> applicationContext.xml
	공통빈을 구성
(완)
5. child 컨테이너 >> dispatcher-servlet.xml 구성 파일로 

applicationContext.xml >> listener
dispatcher-servlet.xml >> Dispatcher-Servlet
(완)

6.다중 파일 업로드
-설계
-DB 테이블
alter table notices
add FileSrc2 varchar2(500);
(완)

6.1 DTO 변화
private String FileSrc2; >> setter , getter
(완)

6.2
기존코드에
private CommonsMultipartFile file 대신에

private CommonsMultipartFile file2 더 만들면 되죠 .... 2개 3개 4개 늘어나면

private List<CommonsMultipartFile> files; setter, getter 추가 
(완)

6.3
DAO SQL 구문 수정
(완)

6.4
View단 Page(UI) 변경 > noticeReg.jsp , noticeEdit.jsp ,noticeDetail.jsp
파일 처리(배열)
상품테이블 [] [] [] 
파일1 > <input type="file" name=files[0]>
파일2 > <intpu type="file" name=files[1]>
(완)

6.5
CustomerController
--데이터 삽입 , 수정
--insert 함수
--update 함수

파일 처리 부분 수정하기(여러개의 파일 처리 하기)

6.6 상세보기
파일 2개 보여주기

>>전체조회 , 상세조회(Template 형태 코드 변환)
>>글쓰기 , 글 수정하기 , 글 삭제하기
-----------------------------------------------------------------------

7. 회원 controller 작성
> JoinController
-회원가입화면
-회원가입처리

함수 2개(MemberDao 인터페이스를 구현하는 NewMemberDao 처리)
NewMemberDao는 JdbcTemplate에 의존

8. DB 컬럼명 1개 수정 (UID >> userid 수정)
alter table member
rename column "UID" to USERID;
(완)
9. MemberDTO 수정 >> Member DTO 수정
(완)

10. 회원가입 (index.jsp) >>링크 >> joinus/join.htm 요청
(완)
11. Oracle 한글 한 글자 3Byte 처리
alter table member
modify gender varchar2(20);
(완)

--메인화면
--회원가입(로그인(x)) 인증과 권한
